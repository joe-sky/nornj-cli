(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{239:function(e,v,t){"use strict";t.r(v);var _=t(0),s=Object(_.a)({},function(){var e=this,v=e.$createElement,t=e._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"环境变量和模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境变量和模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 环境变量和模式")]),e._v(" "),t("p",[e._v("你可以替换你的项目根目录中的下列文件来指定环境变量：")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v(".env                "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 在所有的环境中被载入")]),e._v("\n.env.local          "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 在所有的环境中被载入，但会被 git 忽略")]),e._v("\n.env."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("mode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 只在指定的模式中被载入")]),e._v("\n.env."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("mode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(".local   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 只在指定的模式中被载入，但会被 git 忽略")]),e._v("\n")])])]),t("p",[e._v("一个环境文件只包含环境变量的“键=值”对：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("FOO=bar\nVUE_APP_SECRET=secret\n")])])]),t("p",[e._v("被载入的变量将会对 "),t("code",[e._v("vue-cli-service")]),e._v(" 的所有命令、插件和依赖可用。")]),e._v(" "),t("div",{staticClass:"tip custom-block"},[t("p",{staticClass:"custom-block-title"},[e._v("环境加载属性")]),e._v(" "),t("p",[e._v("为一个特定模式准备的环境文件的 (例如 "),t("code",[e._v(".env.production")]),e._v(") 将会比一般的环境文件 (例如 "),t("code",[e._v(".env")]),e._v(") 拥有更高的优先级。")]),e._v(" "),t("p",[e._v("此外，Vue CLI 启动时已经存在的环境变量拥有最高优先级，并不会被 "),t("code",[e._v(".env")]),e._v(" 文件覆写。")])]),e._v(" "),t("div",{staticClass:"warning custom-block"},[t("p",{staticClass:"custom-block-title"},[e._v("NODE_ENV")]),e._v(" "),t("p",[e._v("如果在环境中有默认的 "),t("code",[e._v("NODE_ENV")]),e._v("，你应该移除它或在运行 "),t("code",[e._v("vue-cli-service")]),e._v(" 命令的时候明确地设置 "),t("code",[e._v("NODE_ENV")]),e._v("。")])]),e._v(" "),t("h2",{attrs:{id:"模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 模式")]),e._v(" "),t("p",[t("strong",[e._v("模式")]),e._v("是 Vue CLI 项目中一个重要的概念。默认情况下，一个 Vue CLI 项目有三个模式：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("development")]),e._v(" 模式用于 "),t("code",[e._v("vue-cli-service serve")])]),e._v(" "),t("li",[t("code",[e._v("production")]),e._v(" 模式用于 "),t("code",[e._v("vue-cli-service build")]),e._v(" 和 "),t("code",[e._v("vue-cli-service test:e2e")])]),e._v(" "),t("li",[t("code",[e._v("test")]),e._v(" 模式用于 "),t("code",[e._v("vue-cli-service test:unit")])])]),e._v(" "),t("p",[e._v("注意模式不同于 "),t("code",[e._v("NODE_ENV")]),e._v("，一个模式可以包含多个环境变量。也就是说，每个模式都会将 "),t("code",[e._v("NODE_ENV")]),e._v(" 的值设置为模式的名称——比如在 development 模式下 "),t("code",[e._v("NODE_ENV")]),e._v(" 的值会被设置为 "),t("code",[e._v('"development"')]),e._v("。")]),e._v(" "),t("p",[e._v("你可以通过为 "),t("code",[e._v(".env")]),e._v(" 文件增加后缀来设置某个模式下特有的环境变量。比如，如果你在项目根目录创建一个名为 "),t("code",[e._v(".env.development")]),e._v(" 的文件，那么在这个文件里声明过的变量就只会在 development 模式下被载入。")]),e._v(" "),t("p",[e._v("你可以通过传递 "),t("code",[e._v("--mode")]),e._v(" 选项参数为命令行覆写默认的模式。例如，如果你想要在构建命令中使用开发环境变量，请在你的 "),t("code",[e._v("package.json")]),e._v(" 脚本中加入：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"dev-build": "vue-cli-service build --mode development",\n')])])]),t("h2",{attrs:{id:"示例：staging-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例：staging-模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 示例：Staging 模式")]),e._v(" "),t("p",[e._v("假设我们有一个应用包含以下 "),t("code",[e._v(".env")]),e._v(" 文件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("VUE_APP_TITLE=My App\n")])])]),t("p",[e._v("和 "),t("code",[e._v(".env.staging")]),e._v(" 文件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("NODE_ENV=production\nVUE_APP_TITLE=My App (staging)\n")])])]),t("ul",[t("li",[t("p",[t("code",[e._v("vue-cli-service build")]),e._v(" 会加载可能存在的 "),t("code",[e._v(".env")]),e._v("、"),t("code",[e._v(".env.production")]),e._v(" 和 "),t("code",[e._v(".env.production.local")]),e._v(" 文件然后构建出生产环境应用；")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("vue-cli-service build --mode staging")]),e._v(" 会在 staging 模式下加载可能存在的 "),t("code",[e._v(".env")]),e._v("、"),t("code",[e._v(".env.staging")]),e._v(" 和 "),t("code",[e._v(".env.staging.local")]),e._v(" 文件然后构建出生产环境应用。")])])]),e._v(" "),t("p",[e._v("这两种情况下，根据 "),t("code",[e._v("NODE_ENV")]),e._v("，构建出的应用都是生产环境应用，但是在 staging 版本中，"),t("code",[e._v("process.env.VUE_APP_TITLE")]),e._v(" 被覆写成了另一个值。")]),e._v(" "),t("h2",{attrs:{id:"在客户端侧代码中使用环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在客户端侧代码中使用环境变量","aria-hidden":"true"}},[e._v("#")]),e._v(" 在客户端侧代码中使用环境变量")]),e._v(" "),t("p",[e._v("只有以 "),t("code",[e._v("VUE_APP_")]),e._v(" 开头的变量会被 "),t("code",[e._v("webpack.DefinePlugin")]),e._v(" 静态嵌入到客户端侧的包中。你可以在应用的代码中这样访问它们：")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("process"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("env"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[e._v("VUE_APP_SECRET")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("在构建过程中，"),t("code",[e._v("process.env.VUE_APP_SECRET")]),e._v(" 将会被相应的值所取代。在 "),t("code",[e._v("VUE_APP_SECRET=secret")]),e._v(" 的情况下，它会被替换为 "),t("code",[e._v('"sercet"')]),e._v("。")]),e._v(" "),t("p",[e._v("除了 "),t("code",[e._v("VUE_APP_*")]),e._v(" 变量之外，在你的应用代码中始终可用的还有两个特殊的变量：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("NODE_ENV")]),e._v(" - 会是 "),t("code",[e._v('"development"')]),e._v("、"),t("code",[e._v('"production"')]),e._v(" 或 "),t("code",[e._v('"test"')]),e._v(" 中的一个。具体的值取决于应用运行的"),t("a",{attrs:{href:"#%E6%A8%A1%E5%BC%8F"}},[e._v("模式")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("BASE_URL")]),e._v(" - 会和 "),t("code",[e._v("vue.config.js")]),e._v(" 中的 "),t("code",[e._v("publicPath")]),e._v(" 选项相符，即你的应用会部署到的基础路径。")])]),e._v(" "),t("p",[e._v("所有解析出来的环境变量都可以在 "),t("code",[e._v("public/index.html")]),e._v(" 中以 "),t("router-link",{attrs:{to:"/zh/guide/html-and-static-assets.html#插值"}},[e._v("HTML 插值")]),e._v("中介绍的方式使用。")],1),e._v(" "),t("div",{staticClass:"tip custom-block"},[t("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),t("p",[e._v("你可以在 "),t("code",[e._v("vue.config.js")]),e._v(" 文件中计算环境变量。它们仍然需要以 "),t("code",[e._v("VUE_APP_")]),e._v(" 前缀开头。这可以用于版本信息 "),t("code",[e._v("process.env.VUE_APP_VERSION = require('./package.json').version")]),e._v("。")])]),e._v(" "),t("h2",{attrs:{id:"只在本地有效的变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#只在本地有效的变量","aria-hidden":"true"}},[e._v("#")]),e._v(" 只在本地有效的变量")]),e._v(" "),t("p",[e._v("有的时候你可能有一些不应该提交到代码仓库中的变量，尤其是当你的项目托管在公共仓库时。这种情况下你应该使用一个 "),t("code",[e._v(".env.local")]),e._v(" 文件取而代之。本地环境文件默认会被忽略，且出现在 "),t("code",[e._v(".gitignore")]),e._v(" 中。")]),e._v(" "),t("p",[t("code",[e._v(".local")]),e._v(" 也可以加在指定模式的环境文件上，比如 "),t("code",[e._v(".env.development.local")]),e._v(" 将会在 development 模式下被载入，且被 git 忽略。")])])},[],!1,null,null,null);v.default=s.exports}}]);