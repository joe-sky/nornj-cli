(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{235:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"预置的项目模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预置的项目模板","aria-hidden":"true"}},[e._v("#")]),e._v(" 预置的项目模板")]),e._v(" "),a("h2",{attrs:{id:"react-mst"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-mst","aria-hidden":"true"}},[e._v("#")]),e._v(" react-mst")]),e._v(" "),a("p",[e._v("运行以下命令来创建一个新项目：")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("vue create hello-world\n")])])]),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[e._v("警告")]),e._v(" "),a("p",[e._v("如果你在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作。你必须通过 "),a("code",[e._v("winpty vue.cmd create hello-world")]),e._v(" 启动这个命令。不过，如果你仍想使用 "),a("code",[e._v("vue create hello-world")]),e._v("，则可以通过在 "),a("code",[e._v("~/.bashrc")]),e._v(" 文件中添加以下行来为命令添加别名。\n"),a("code",[e._v("alias vue='winpty vue.cmd'")]),e._v("\n你需要重新启动 Git Bash 终端会话以使更新后的 bashrc 文件生效。")])]),e._v(" "),a("p",[e._v("你会被提示选取一个 preset。你可以选默认的包含了基本的 Babel + ESLint 设置的 preset，也可以选“手动选择特性”来选取需要的特性。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/cli-new-project.png",alt:"CLI 预览"}})]),e._v(" "),a("p",[e._v("这个默认的设置非常适合快速创建一个新项目的原型，而手动设置则提供了更多的选项，它们是面向生产的项目更加需要的。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/cli-select-features.png",alt:"CLI 预览"}})]),e._v(" "),a("p",[e._v("如果你决定手动选择特性，在操作提示的最后你可以选择将已选项保存为一个将来可复用的 preset。我们会在下一个章节讨论 preset 和插件。")]),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[e._v("~/.vuerc")]),e._v(" "),a("p",[e._v("被保存的 preset 将会存在用户的 home 目录下一个名为 "),a("code",[e._v(".vuerc")]),e._v(" 的 JSON 文件里。如果你想要修改被保存的 preset / 选项，可以编辑这个文件。")]),e._v(" "),a("p",[e._v("在项目创建的过程中，你也会被提示选择喜欢的包管理器或使用"),a("a",{attrs:{href:"https://npm.taobao.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("淘宝 npm 镜像源"),a("OutboundLink")],1),e._v("以更快地安装依赖。这些选择也将会存入 "),a("code",[e._v("~/.vuerc")]),e._v("。")])]),e._v(" "),a("p",[a("code",[e._v("vue create")]),e._v(" 命令有一些可选项，你可以通过运行以下命令进行探索：")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("vue create --help\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("用法：create [options] <app-name>\n\n创建一个由 `vue-cli-service` 提供支持的新项目\n\n\n选项：\n\n  -p, --preset <presetName>       忽略提示符并使用已保存的或远程的预设选项\n  -d, --default                   忽略提示符并使用默认预设选项\n  -i, --inlinePreset <json>       忽略提示符并使用内联的 JSON 字符串预设选项\n  -m, --packageManager <command>  在安装依赖时使用指定的 npm 客户端\n  -r, --registry <url>            在安装依赖时使用指定的 npm registry\n  -g, --git [message]             强制 / 跳过 git 初始化，并可选的指定初始化提交信息\n  -n, --no-git                    跳过 git 初始化\n  -f, --force                     覆写目标目录可能存在的配置\n  -c, --clone                     使用 git clone 获取远程预设选项\n  -x, --proxy                     使用指定的代理创建项目\n  -b, --bare                      创建项目时省略默认组件中的新手指导信息\n  -h, --help                      输出使用帮助信息\n")])])]),a("h2",{attrs:{id:"react-mobx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-mobx","aria-hidden":"true"}},[e._v("#")]),e._v(" react-mobx")]),e._v(" "),a("p",[e._v("你也可以通过 "),a("code",[e._v("vue ui")]),e._v(" 命令以图形化界面创建和管理项目：")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("vue ui\n")])])]),a("p",[e._v("上述命令会打开一个浏览器窗口，并以图形化界面将你引导至项目创建的流程。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/ui-new-project.png",alt:"图形化界面预览"}})])])},[],!1,null,null,null);t.default=r.exports}}]);